input {
	beats {
		port => 5044
        ssl => true
        ssl_certificate_authorities => ["/etc/ca.crt"]
        ssl_certificate => "/etc/beats.crt"
        ssl_key => "/etc/beats.key"
        ssl_verify_mode => "force_peer"
	}

	tcp {
		port => 5000
	}
    file {
        type => "nginx_access"
        start_position => "beginning"
        path => [ "/host/var/log/nginx/access.log", "/host/var/log/nginx/sites/access-*.log" ]
    }
    file {
        type => "nginx_error"
        start_position => "beginning"
        path => [ "/host/var/log/nginx/error.log", "/host/var/log/nginx/sites/error-*.log" ]
    }
    file {
        type => "discord"
        start_position => "beginning"
        path => [ "/var/log/mrbot.log" ]
        codec => multiline {
          pattern => "^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2},[0-9]{3}:"
          negate => true
          what => "previous"
        }
    }
    file {
        type => "rpm"
        start_position => "beginning"
        path => [ "/host/var/log/dnf.rpm.log" ]
    }
}

filter {
    if [type] == "discord" {
        grok {
            patterns_dir => "/usr/share/logstash/patterns"
            match => { "message" => "%{DISCORD_PATTERN}" }
            remove_field => ["message"]
            add_tag => [ "discord", "mrbot" ]
        }

        date {
            # 2022-05-07 23:49:34,816
            # Python '%Y-%m-%d %H:%M:%S,uuu'
            match => [ "py_timestamp", "yyyy-MM-dd HH:mm:ss,SSS" ]
            timezone => "Europe/Oslo"
            target => "@timestamp"
            remove_field => ["py_timestamp"]
        }
    }
    if [type] == "nginx_access" {
        grok {
            patterns_dir => "/usr/share/logstash/patterns"
            match => { "message" => "%{NGINX_ACCESS}" }
            remove_field => ["message"]
            remove_tag => [ "_grokparsefailure" ]
            add_tag => [ "nginx_access" ]
        }

        geoip {
            source => "remote_addr"
        }
    }
    if [type] == "nginx_error" {
        grok {
            patterns_dir => "/usr/share/logstash/patterns"
            match => { "message" => "%{NGINX_ERROR}" }
            remove_field => ["message"]
            remove_tag => [ "_grokparsefailure" ]
            add_tag => [ "nginx_error" ]
        }

        geoip {
            source => "client"
        }
    }
    if [type] == "grafana" {
        grok {
            patterns_dir => "/usr/share/logstash/patterns"
            match => { "message" => "%{GRAFANA}" }
            overwrite => ["message"]
            remove_tag => [ "_grokparsefailure" ]
            add_tag => [ "grafana" ]
        }

        geoip {
            source => "remote_addr"
        }

        date {
            # 2021-07-26T21:59:02+0200  "yyyy-MM-dd'T'HH:mm:ssZ"
            match => [ "grafana_timestamp", "ISO8601" ]
            target => "@timestamp"
        }
    }
    if [agent][type] == 'filebeat' {
        mutate { replace => { "host" => "[host][name]" } }
    }
    if 'syslog' in [tags] {
        grok {
            patterns_dir => "/usr/share/logstash/patterns"
            match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:host} %{DATA:program}(?:\[%{POSINT:pid}\])?: %{GREEDYDATA:message}" }
            overwrite => ["message", "host"]
        }
        date {
            match => [ "syslog_timestamp", "MMM dd HH:mm:ss" ]
            target => "@timestamp"
            locale => "en"
            timezone => "Europe/Oslo"
        }
    }
}
